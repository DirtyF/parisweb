#!/usr/bin/env ruby
require 'rubygems'
require 'slugify'
require 'bundler/setup'
require_relative '../lib/helper_download'
require_relative '../lib/helper_extract'
require_relative '../lib/helper_selector'

class Selector2007
  include HelperSelector

  def initialize
    @sessions_filepath = Dir[File.expand_path('./data/2007/sessions*.html')]
    @workshop_filepath = File.expand_path('./data/2007/ateliers.html')
    @authors_filepath = File.expand_path('./data/2007/authors.html')
    @ressources_filepath = File.expand_path('./data/2007/ressources.html')
    @videos_filepath = File.expand_path('./data/2007/videos.html')
  end

  def description_tags(title)
    para = title.next_element
    paras = []
    loop do
      break if para.name != 'p'
      element(para, 'a[href^=Presentation]').remove
      paras << para
      para = para.next_element
    end
    paras
  end

  def description(title)
    tags = description_tags(title)
    description = tags.map(&:text)
    description.join(' ').tr("\n", '').strip
  end

  def authors(title)
    tags = description_tags(title)
    authors = []
    tags.each do |tag|
      links = element(tag, 'a.spip_in')
      next if links.empty?
      links.each do |link|
        authors << link.text
      end
    end
    authors
  end

  def title(title)
    title.text.split(': ')[1..-1].join(': ')
  end

  def url(title, filepath)
    basename = File.basename(filepath)
    anchor = element(title, 'a[name]')
    return nil if anchor.empty?
    anchor = anchor[0].attr('name')

    prefix = 'https://www.paris-web.fr/2007/'

    url = "#{prefix}Jeudi-15-novembre.html##{anchor}" if basename == 'sessions01.html'
    url = "#{prefix}Vendredi-16-novembre.html##{anchor}" if basename == 'sessions02.html'
    url = "#{prefix}Samedi-17-novembre.html##{anchor}" if basename == 'ateliers.html'

    url
  end

  def sessions
    sessions = []
    @sessions_filepath.each do |filepath|
      doc = Nokogiri::HTML(File.open(filepath).read)

      titles = element(doc, 'h3.spip')
      titles.each do |title|
        sessions << {
          year: 2007,
          type: 'conference',
          title: title(title),
          url: url(title, filepath),
          description: description(title),
          authors: authors(title)
        }
      end
    end

    sessions += workshops

    sessions.reject do |session|
      session[:authors].empty?
    end
  end

  def workshops
    doc = Nokogiri::HTML(File.open(@workshop_filepath).read)
    workshops = []

    titles = element(doc, 'h3.spip a[name]')
    titles.each do |title|
      parent = title.ancestors('h3')[0]
      workshops << {
        year: 2007,
        type: 'workshop',
        title: parent.text,
        url: url(parent, @workshop_filepath),
        description: description(parent),
        authors: authors(parent)
      }
    end

    workshops
  end

  def add_authors(sessions)
    doc = Nokogiri::HTML(File.open(@authors_filepath).read)
    authors = {}

    vcards = element(doc, '.trombinoscope li')
    vcards.each do |author|
      name = element(author, 'h2').text.strip
      picture = attribute(author, 'h2 img', 'src')
      picture = "http://www.paris-web.fr/2007/#{picture}"
      description = element(author, 'p').text
      authors[name.slugify] = {
        picture: picture,
        description: description
      }
    end

    sessions = sessions.map do |session|
      session[:authors] = session[:authors].map do |author|
        matching_author = authors[author.slugify]
        next if matching_author.nil?
        {
          name: author,
          picture: matching_author[:picture],
          description: matching_author[:description]
        }
      end
      session[:authors] = session[:authors].reject(&:nil?)

      session
    end

    sessions.reject(&:nil?)
  end

  def add_slides(sessions)
    doc = Nokogiri::HTML(File.open(@ressources_filepath).read)
    slides = {}

    links = element(doc, 'a[href$=pdf],a[href$="7z"]')
    links.each do |link|
      url = link.attr('href')
      split = url.split('/')
      slug = split[3].slugify
      slug = split[2].slugify if slug =~ /(pdf|7z)$/
      slug = slug[3..-1] if slug =~ /^0.-/
      slides[slug] = {
        url: "http://www.paris-web.fr/2007/#{url}"
      }
    end

    sessions.each do |session|
      slug = session[:authors].map do |author|
        author[:name]
      end.join('-').slugify

      slug = 'aurelien-levy-elie-sloim-pascal-souhard' if slug == 'pascal-souhard-elie-sloim-laurent-denis-aurelien-levy'
      slug = 'raphael-goetter-pascale-lambert-charreteur' if slug == 'pascale-lambert-charreteur-raphael-goetter'
      slug = 'marie-destandau-aurelien-levy' if slug == 'laurent-denis-aurelien-levy-marie-destandau'
      slug = 'mathieu-pillard-anthony-ricaud' if slug == 'anthony-ricaud-mathieu-pillard'
      slug = 'fabrice-bonny-denis-boudreau-elie-sloim' if slug == 'elie-sloim-fabrice-bonny'
      slug = 'laurence-borne-marie-destandau-julie-landry-emilie-sidoli' if slug == 'emilie-sidoli-julie-landry-laurence-borne-marie-destandau'
      slug = 'christophe-porteneuve-julien-wajsberg' if slug == 'julien-wajsberg-christophe-porteneuve'
      slug = 'louis-montagne-ori-pekelman' if slug == 'ori-pekelman-louis-montagne'

      session[:ressources] = {
        slides: slides[slug][:url]
      }
    end

    sessions
  end

  def add_videos(sessions)
    doc = Nokogiri::HTML(File.open(@videos_filepath).read)
    videos = {}

    lines = element(doc, 'tbody tr')
    lines.each do |line|
      speaker = element(line, '.speaker').text
      url = element(line, '.downloadLink a')[0].attr('href')
      slug = speaker.slugify
      videos[slug] = url
    end

    sessions.each do |session|
      next if session[:type] == 'workshop'
      slug = session[:authors].map do |author|
        author[:name]
      end.join('-').slugify

      slug = 'pascal-souhard--elie-sloim-et-aurelien-levy' if slug == 'pascal-souhard-elie-sloim-laurent-denis-aurelien-levy'
      slug = 'christian-heilmann' if slug == 'chris-heilmann'

      session[:ressources][:video] = videos[slug]
    end

    sessions
  end

  def run
    content = add_authors(sessions)
    content = add_slides(content)
    content = add_videos(content)
    ap content

    output = HelperPath.record('2007')
    FileUtils.mkdir_p(File.dirname(output))
    content = JSON.pretty_generate(content)
    File.write(output, content)
  end
end

Selector2007.new.run
